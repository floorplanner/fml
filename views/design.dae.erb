<?xml version="1.0"?>
<COLLADA xmlns="http://www.collada.org/2005/11/COLLADASchema" version="1.4.1">
  <asset>
    <contributor>
      <author>john doe &lt;johnny@floorplanner.com&gt;</author>
    </contributor>
    <created>2006-06-21T21:23:22Z</created>
    <modified>2006-06-21T21:23:22Z</modified>
    <unit meter="1.00" name="meter"/>
    <up_axis>Z_UP</up_axis>
  </asset>
  
  <library_cameras>
    <camera id="main-cam">
      <optics>
        <technique_common>
          <perspective>
            <yfov>70</yfov>
            <znear>0.1</znear>
            <zfar>100.0</zfar>
          </perspective>
        </technique_common>
      </optics>
    </camera>
  </library_cameras>

  <library_materials id="surrounding-materials">
    <material id="walls-material" name="WallsMaterial">
      <instance_effect url="#walls-fx"/>
    </material>
    <material id="windows-material" name="WindowsMaterial">
      <instance_effect url="#windows-fx"/>
    </material>
    <% @areas.each do |area_mesh| %>
      <material id="area_<%= area_mesh.data[:id] %>-material" name="<%= area_mesh.data[:name] %>">
        <instance_effect url="#area_<%= area_mesh.data[:id] %>-fx"/>
      </material>
    <% end %>
    <% unless @conf[:xrefs]; @assets.each_value do |asset| %>
      <% asset.library_materials.each do |materials| %>
        <%= materials.to_s %>
      <% end %>
    <% end; end %>
  </library_materials>

  <library_effects id="surrounding-effects">
    <effect id="walls-fx">
      <profile_COMMON>
        <technique>
          <phong>
            <emission>
              <color>0.05 0.05 0.05 1</color>
            </emission>
            <ambient>
              <color>0.15 0.15 0.15 1</color>
            </ambient>
            <diffuse>
              <color>0.9 0.9 0.9 1</color>
            </diffuse>
            <specular>
              <color>0 0 0 1</color>
            </specular>
            <shininess>
              <float>0.0</float>
            </shininess>
            <reflective>
              <color>1 1 1 1</color>
            </reflective>
            <reflectivity>
              <float>0.0</float>
            </reflectivity>
            <transparent>
              <color>1 1 1 1</color>
            </transparent>
            <transparency>
              <float>0.0</float>
            </transparency>
          </phong>
        </technique>
      </profile_COMMON>
    </effect>
    <effect id="windows-fx">
      <profile_COMMON>
        <technique>
          <phong>
            <emission>
              <color>0.0 0.0 0.0 1</color>
            </emission>
            <ambient>
              <color>0.15 0.15 0.15 1</color>
            </ambient>
            <diffuse>
              <color>0.9 0.9 1.0 1</color>
            </diffuse>
            <specular>
              <color>0 0 0 1</color>
            </specular>
            <shininess>
              <float>0.0</float>
            </shininess>
            <reflective>
              <color>1 1 1 1</color>
            </reflective>
            <reflectivity>
              <float>0.2</float>
            </reflectivity>
            <transparent>
              <color>1 1 1 1</color>
            </transparent>
            <transparency>
              <float>0.9</float>
            </transparency>
          </phong>
        </technique>
      </profile_COMMON>
    </effect>
    <% @areas.each do |area_mesh|; id = area_mesh.data[:id].to_s %>
      <effect id="area_<%= id %>-fx" name="<%= area_mesh.data[:name] %>">
        <% if area_mesh.data[:texture] %>
          <extra>
            <technique sid="sunflow">
              <diffuse><%= area_mesh.data[:color].join(' ') %></diffuse>
            </technique>
          </extra>
        <% end %>
        <profile_COMMON>
          <% if area_mesh.data[:texture] %>
          <newparam sid="area_<%= id %>-surface">
              <surface type="2D">
                <init_from>area_<%= id %>-image</init_from>
              </surface>
          </newparam>
          <newparam sid="area_<%= id %>-sampler">
              <sampler2D>
                <source>area_<%= id %>-surface</source>
              </sampler2D>
          </newparam>
          <% end %>
          <technique>
            <phong>
              <emission>
                <color>0.05 0.05 0.05 1</color>
              </emission>
              <ambient>
                <color>0.1 0.1 0.1 1</color>
              </ambient>
              <diffuse>
                <% if area_mesh.data[:texture] %>
                <texture texture="area_<%= id %>-sampler"/>
                <% else %>
                <color><%= area_mesh.data[:color].join(' ') %> 1</color>
                <% end %>
              </diffuse>
              <specular>
                <color>0 0 0 1</color>
              </specular>
              <shininess>
                <float>0.0</float>
              </shininess>
              <reflective>
                <color>1 1 1 1</color>
              </reflective>
              <reflectivity>
                <float>0.0</float>
              </reflectivity>
              <transparent>
                <color>1 1 1 1</color>
              </transparent>
              <transparency>
                <float>0.0</float>
              </transparency>
            </phong>
          </technique>
        </profile_COMMON>
      </effect>
    <% end %>
    <% unless @conf[:xrefs]; @assets.each_value do |asset| %>
      <% asset.library_effects.each do |effects| %>
        <%= effects.to_s %>
      <% end %>
    <% end; end %>
  </library_effects>

  <library_images>
    <% @areas.each do |area_mesh|; if area_mesh.data[:texture] %>
    <image id="area_<%= area_mesh.data[:id] %>-image" name="<%= area_mesh.data[:name] %>">
    <init_from><%= Floorplanner.config['area_textures_path'] + 
                   area_mesh.data[:texture].gsub('textures/2d/','').gsub(/\.swf$/,'.png') %></init_from>
    </image>
    <% end; end %>

    <% unless @conf[:xrefs]; @assets.each_value do |asset| %>
      <% asset.library_images.each do |image| %>
        <%= image.to_s %>
      <% end %>
    <% end; end %>
  </library_images>

  <library_geometries id="surrounding-geometry">

    <geometry id="walls-geom" name="WallsGeometry">
      <mesh>
        <source id="walls-positions" name="position">
          <float_array id="walls-positions-array" count="<%= @walls.vertices.length*3 %>">
            <%= @walls.vertices.collect {|v| v.to_floats }.join(' ') %>
          </float_array>

          <technique_common>
            <accessor count="<%= @walls.vertices.length %>" offset="0" source="#walls-positions-array" stride="3">
              <param name="X" type="float"></param>
              <param name="Y" type="float"></param>
              <param name="Z" type="float"></param>
            </accessor>
          </technique_common>
        </source>

        <vertices id="walls-vertices">
          <input semantic="POSITION" source="#walls-positions"/>
        </vertices>

        <triangles count="<%= @walls.faces.length %>" material="Walls">
           <input semantic="VERTEX" source="#walls-vertices" offset="0"/>
           <p>
             <%= @walls.faces.collect{|f| f.vertices.collect{|v| @walls.vertices.index(v)}}.flatten.join(' ') %>
           </p>
        </triangles>
      </mesh>
    </geometry>

    <geometry id="windows-geom" name="WindowsGeometry">
    <%
      windows_vertices = @walls.windows.collect {|w| w.vertices}.flatten
      windows_faces = @walls.windows.collect {|w| w.faces}.flatten
    %>
      <mesh>
        <source id="windows-positions" name="position">
          <float_array id="windows-positions-array" count="<%= @walls.vertices.length*3 %>">
            <%= windows_vertices.collect {|v| v.to_floats }.join(' ') %>
          </float_array>

          <technique_common>
            <accessor count="<%= windows_vertices.length %>" offset="0" source="#windows-positions-array" stride="3">
              <param name="X" type="float"></param>
              <param name="Y" type="float"></param>
              <param name="Z" type="float"></param>
            </accessor>
          </technique_common>
        </source>

        <vertices id="windows-vertices">
          <input semantic="POSITION" source="#windows-positions"/>
        </vertices>

        <triangles count="<%= windows_faces.length %>" material="Window">
           <input semantic="VERTEX" source="#windows-vertices" offset="0"/>
           <p>
             <% offset = 0
                @walls.windows.each do |w|
             %>
               <%= w.faces.collect{|f| f.vertices.collect{|v| w.vertices.index(v) + offset}}.flatten.join(' ') %>
             <% offset += w.vertices.length ; end %>
           </p>
        </triangles>
      </mesh>
    </geometry>
    <% @areas.each do |area_mesh|; id = area_mesh.data[:id] %>
    <geometry id="area_<%= id %>-geom" name="Area_<%= id %>_<%= area_mesh.data[:name] %>-Geometry">
        <mesh>
          <source id="area_<%= id %>-positions" name="position">

            <float_array id="area_<%= id %>-positions-array" count="<%= area_mesh.vertices.length*3 %>">
              <%= area_mesh.vertices.collect {|v| v.to_floats }.join(' ') %>
            </float_array>

            <technique_common>
              <accessor count="<%= area_mesh.vertices.length %>" offset="0" source="#area_<%= id %>-positions-array" stride="3">
                <param name="X" type="float"></param>
                <param name="Y" type="float"></param>
                <param name="Z" type="float"></param>
              </accessor>
            </technique_common>
          </source>

          <source id="area_<%= id %>-uvs" name="texcoord">
            <float_array id="area_<%= id %>-uvs-array" count="<%= area_mesh.texcoord.length*2 %>">
              <%= area_mesh.texcoord.map{|n| [n.u,n.v]}.flatten.join(' ') %>
            </float_array>
            <technique_common>
              <accessor count="<%= area_mesh.texcoord.length %>" source="#area_<%= id %>-uvs-array" stride="2">
                <param name="S" type="float"/>
                <param name="T" type="float"/>
              </accessor>
            </technique_common>
          </source>

          <vertices id="area_<%= id %>-vertices">
            <input semantic="POSITION" source="#area_<%= id %>-positions"/>
          </vertices>

          <triangles count="<%= area_mesh.faces.length %>" material="<%= "Area_"+id %>">
            <input semantic="VERTEX" source="#area_<%= id %>-vertices" offset="0"/>
            <input semantic="TEXCOORD" source="#area_<%= id %>-uvs" offset="1"/>
            <p>
              <%=
                area_mesh.faces.collect { |f|
                  v = f.vertices.collect { |v| area_mesh.vertices.index(v) }
                  t = f.texcoord.collect { |t| area_mesh.texcoord.index(t) }
                  [v[0],t[0],v[1],t[1],v[2],t[2]]
                }.flatten.join(' ')
              %>
             </p>
          </triangles>
        </mesh>
      </geometry>
    <% end %>
    <% unless @conf[:xrefs]; @assets.each_value do |asset| %>
      <% asset.library_geometries.each do |geometries| %>
        <%= geometries.to_s %>
      <% end %>
    <% end; end %>
  </library_geometries>
  <% unless @conf[:xrefs] %>
  <library_nodes>
    <% @assets.each_value do |asset| %>
      <% asset.library_nodes.each do |nodes| %>
        <%= nodes.to_s %>
      <% end %>
    <% end %>
  </library_nodes>
  <% end %>
  <library_visual_scenes>
  <visual_scene id="VisualSceneNode" name="<%= @name %>">
      <extra>
        <technique sid="sunflow">
          <image>
            <resolution>800 600</resolution>
            <aa>0 2</aa>
            <filter>gaussian</filter>
            <sampler>ipr</sampler>
          </image>
          <trace_depths>
            <diffuse>4</diffuse>
            <reflection>2</reflection>
          </trace_depths>
          <gi>
            <type>ambocc</type>
            <bright>1 1 1</bright>
            <dark>0 0 0</dark>
            <samples>64</samples>
            <maxdist>3.0 </maxdist>
          </gi>
          <sunsky>
            <up>0 0 1</up>
            <east>1 0 0</east>
            <sundir>0.2 0.4 0.7</sundir>
            <ground>1 1 1</ground>
          </sunsky>
        </technique>
      </extra>
      <node id="Camera" name="Camera">
        <lookat>
          9.0 -1.0 1.4
          8.0 -2.0 1.4
          0.0 0.0 1.0
        </lookat>
        <instance_camera url="#main-cam"/>
      </node>
      <node id="Walls" name="Walls">
        <instance_geometry url="#walls-geom">
          <bind_material>
            <technique_common>
              <instance_material symbol="Walls" target="#walls-material"/>
            </technique_common>
          </bind_material>
        </instance_geometry>
      </node>
      <node id="Windows" name="Windows">
        <instance_geometry url="#windows-geom">
          <bind_material>
            <technique_common>
              <instance_material symbol="Window" target="#windows-material"/>
            </technique_common>
          </bind_material>
        </instance_geometry>
      </node>
      <node id="Areas" name="Areas">
        <% @areas.each do |area_mesh|; id = area_mesh.data[:id] %>
          <node id="Area_<%= id %>" name="Area_<%= id %>">
            <instance_geometry url="#area_<%= id %>-geom">
              <bind_material>
                <technique_common>
                  <instance_material symbol="Area_<%= id %>" target="#area_<%= id %>-material"/>
                </technique_common>
              </bind_material>
            </instance_geometry>
          </node>
          <% if @conf[:ceiling] && area_mesh.data[:type] == 'generated_area' %>
            <node id="Area_<%= id %>-cap" name="Area_<%= id %>-cap">
              <translate>0.0 0.0 <%= @areas.ceiling_z %></translate>
              <instance_geometry url="#area_<%= id %>-geom">
                <bind_material>
                  <technique_common>
                    <instance_material symbol="Area_<%= id %>" target="#walls-material"/>
                  </technique_common>
                </bind_material>
              </instance_geometry>
            </node>
          <% end %>
        <% end %>
      </node>
      <% @elements.each do |element| %>
        <node name="<%= element[:asset].title %>">
          <translate><%= element[:position].to_floats %></translate>
          <% if element[:matrix] %>
            <matrix><%= element[:matrix].to_a.join ' ' %></matrix>
          <% end %>
          <% if element[:rotation].x > 0 %>
            <rotate sid="rotateX">1 0 0 <%= element[:rotation].x %></rotate>
          <% end %>
          <% if element[:rotation].y > 0 %>
            <rotate sid="rotateY">0 1 0 <%= element[:rotation].y %></rotate>
          <% end %>
          <% if element[:rotation].z > 0 %>
            <rotate sid="rotateZ">0 0 1 <%= element[:rotation].z %></rotate>
          <% end %>
          <scale><%= element[:scale].to_floats %></scale>
          <% if @conf[:xrefs] %>
            <instance_node url="<%= element[:asset].dae_path %>"/>
          <% else %>
            <%= element[:asset].visual_scene_node.to_s  %>
          <% end %>
        </node>
      <% end %>
    </visual_scene>
  </library_visual_scenes>
  <scene>
    <instance_visual_scene url="#VisualSceneNode"/>
  </scene>
</COLLADA>
